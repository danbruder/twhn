-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Juniper.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Juniper.InputObject
import Juniper.Interface
import Juniper.Object
import Juniper.Scalar
import Juniper.ScalarCodecs
import Juniper.Union


version : SelectionSet String RootQuery
version =
    Object.selectionForField "String" "version" [] Decode.string


type alias TopStoriesOptionalArguments =
    { limit : OptionalArgument Int }


topStories :
    (TopStoriesOptionalArguments -> TopStoriesOptionalArguments)
    -> SelectionSet decodesTo Juniper.Object.Story
    -> SelectionSet (List decodesTo) RootQuery
topStories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "topStories" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias StoryByIdRequiredArguments =
    { id : Int }


storyById :
    StoryByIdRequiredArguments
    -> SelectionSet decodesTo Juniper.Object.Story
    -> SelectionSet (Maybe decodesTo) RootQuery
storyById requiredArgs____ object____ =
    Object.selectionForCompositeField "storyById" [ Argument.required "id" requiredArgs____.id Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias CommentByIdRequiredArguments =
    { id : Int }


commentById :
    CommentByIdRequiredArguments
    -> SelectionSet decodesTo Juniper.Object.Comment
    -> SelectionSet (Maybe decodesTo) RootQuery
commentById requiredArgs____ object____ =
    Object.selectionForCompositeField "commentById" [ Argument.required "id" requiredArgs____.id Encode.int ] object____ (Basics.identity >> Decode.nullable)
