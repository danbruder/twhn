-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Juniper.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Juniper.InputObject
import Juniper.Interface
import Juniper.Object
import Juniper.Scalar
import Juniper.ScalarCodecs
import Juniper.Union


type alias TopItemsOptionalArguments =
    { limit : OptionalArgument Int }


topItems :
    (TopItemsOptionalArguments -> TopItemsOptionalArguments)
    -> SelectionSet decodesTo Juniper.Union.Item
    -> SelectionSet (List decodesTo) RootQuery
topItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "topItems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias AskItemsOptionalArguments =
    { limit : OptionalArgument Int }


askItems :
    (AskItemsOptionalArguments -> AskItemsOptionalArguments)
    -> SelectionSet decodesTo Juniper.Union.Item
    -> SelectionSet (List decodesTo) RootQuery
askItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "askItems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias JobItemsOptionalArguments =
    { limit : OptionalArgument Int }


jobItems :
    (JobItemsOptionalArguments -> JobItemsOptionalArguments)
    -> SelectionSet decodesTo Juniper.Union.Item
    -> SelectionSet (List decodesTo) RootQuery
jobItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "jobItems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias BestItemsOptionalArguments =
    { limit : OptionalArgument Int }


bestItems :
    (BestItemsOptionalArguments -> BestItemsOptionalArguments)
    -> SelectionSet decodesTo Juniper.Union.Item
    -> SelectionSet (List decodesTo) RootQuery
bestItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "bestItems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias NewItemsOptionalArguments =
    { limit : OptionalArgument Int }


newItems :
    (NewItemsOptionalArguments -> NewItemsOptionalArguments)
    -> SelectionSet decodesTo Juniper.Union.Item
    -> SelectionSet (List decodesTo) RootQuery
newItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "newItems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ShowItemsOptionalArguments =
    { limit : OptionalArgument Int }


showItems :
    (ShowItemsOptionalArguments -> ShowItemsOptionalArguments)
    -> SelectionSet decodesTo Juniper.Union.Item
    -> SelectionSet (List decodesTo) RootQuery
showItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "showItems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ItemByIdRequiredArguments =
    { id : Int }


itemById :
    ItemByIdRequiredArguments
    -> SelectionSet decodesTo Juniper.Union.Item
    -> SelectionSet (Maybe decodesTo) RootQuery
itemById requiredArgs____ object____ =
    Object.selectionForCompositeField "itemById" [ Argument.required "id" requiredArgs____.id Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias BookmarkedItemsOptionalArguments =
    { limit : OptionalArgument Int }


bookmarkedItems :
    (BookmarkedItemsOptionalArguments -> BookmarkedItemsOptionalArguments)
    -> SelectionSet decodesTo Juniper.Union.Item
    -> SelectionSet (List decodesTo) RootQuery
bookmarkedItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "bookmarkedItems" optionalArgs____ object____ (Basics.identity >> Decode.list)


stats : SelectionSet String RootQuery
stats =
    Object.selectionForField "String" "stats" [] Decode.string
